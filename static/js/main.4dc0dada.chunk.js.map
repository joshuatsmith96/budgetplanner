{"version":3,"sources":["components/BudgetForm.js","App.js","reportWebVitals.js","index.js"],"names":["BudgetForm","useState","expense","setExpense","cost","setCost","fullExpenses","setFullExpenses","totalCost","setTotalCost","className","onSubmit","e","preventDefault","alert","isNaN","document","getElementById","focus","newFullExpense","id","Date","getTime","number","parseInt","concat","type","onChange","target","value","map","fullExpense","onClick","updatedExpenses","filter","deleteExpense","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oQA2EeA,EAxEI,WAAM,MAESC,mBAAS,IAFlB,mBAEdC,EAFc,KAELC,EAFK,OAGGF,mBAAS,GAHZ,mBAGdG,EAHc,KAGRC,EAHQ,OAMmBJ,mBAAS,IAN5B,mBAMdK,EANc,KAMAC,EANA,OAOaN,mBAAS,GAPtB,mBAOdO,EAPc,KAOHC,EAPG,KA6CrB,OACI,sBAAKC,UAAU,aAAf,UACI,uBAAMC,SAlCd,SAAsBC,GAGlB,GAFAA,EAAEC,iBAEc,KAAZX,EACAY,MAAM,gCACH,GAAKC,MAAMb,GAEX,GAAa,KAATE,GAAwB,IAATA,EACtBU,MAAM,2BACH,CACHE,SAASC,eAAe,WAAWC,QAEnC,IAAMC,EAAiB,CACnBC,GAAI,MAAO,IAAIC,MAAOC,UACtBpB,QAASA,EACTqB,OAAQnB,GAGZK,EAAae,SAAShB,GAAagB,SAASpB,IAE5CG,EAAgB,YAAID,GAAcmB,OAAON,IACzChB,EAAW,IACXE,EAAQ,SAhBRS,MAAM,eA4BN,UACI,sBAAKJ,UAAU,SAAf,UACI,4CACA,uBAAOU,GAAG,UAAUM,KAAK,OAAOC,SAAU,SAACf,GAAD,OAAOT,EAAWS,EAAEgB,OAAOC,QAAQA,MAAO3B,OAExF,sBAAKQ,UAAU,SAAf,UACI,yCACA,uBAAOgB,KAAK,SAASC,SAAU,SAACf,GAAD,OAAOP,EAAQO,EAAEgB,OAAOC,QAAQA,MAAOzB,OAE1E,wBAAQsB,KAAK,SAAShB,UAAU,gBAAhC,4BAECJ,EAAawB,KAAI,SAACC,GAAD,OAAiB,sBAA0BrB,UAAU,mBAApC,UAC/B,sBAAKA,UAAY,cAAjB,UACI,8BAAMqB,EAAY7B,UAClB,8BAAM,IAAI6B,EAAYR,YAE1B,wBAAQS,QAAS,kBAxBjC,SAAuBZ,EAAIG,GACvB,IAAMU,EAAkB,YAAK3B,GAAc4B,QAAO,SAAC5B,GAAD,OAAkBA,EAAac,KAAOA,KACxFb,EAAgB0B,GAChBxB,EAAae,SAAShB,GAAagB,SAASD,IAqBTY,CAAcJ,EAAYX,GAAIW,EAAYR,SAAjE,sBALyCQ,EAAYX,OAO7D,qBAAKV,UAAU,QAAf,SACI,yCAAYF,WCvDb4B,MAVf,WAEE,OACE,sBAAK1B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,QCGS2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhC,SAASC,eAAe,SAM1BoB,M","file":"static/js/main.4dc0dada.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './BudgetForm.css';\r\n\r\nconst BudgetForm = () => {\r\n    //Temporarily stored\r\n    const [expense, setExpense] = useState(\"\");\r\n    const [cost, setCost] = useState(0);\r\n\r\n    //Stored in an array\r\n    const [fullExpenses, setFullExpenses] = useState([]);\r\n    const [totalCost, setTotalCost] = useState(0);\r\n\r\n    // When submit button is clicked, a new array is created.\r\n    // This array is then sent to the 'expenses' array for storage.\r\n    // This function will also clear the temporary\r\n    // 'expense' state, clearing the input.\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        if (expense === \"\"){\r\n            alert(\"Please enter an expense\")\r\n        } else if (!isNaN(expense)){\r\n            alert(\"No numbers\")\r\n        } else if (cost === \"\" || cost === 0){\r\n            alert(\"Please enter a cost\")\r\n        } else {\r\n            document.getElementById(\"focusMe\").focus();\r\n\r\n            const newFullExpense = {\r\n                id: \"FE\" + new Date().getTime(),\r\n                expense: expense,\r\n                number: cost,\r\n            }\r\n    \r\n            setTotalCost(parseInt(totalCost) + parseInt(cost))\r\n    \r\n            setFullExpenses([...fullExpenses].concat(newFullExpense))\r\n            setExpense(\"\")\r\n            setCost(\"\")\r\n        }\r\n    }\r\n\r\n    function deleteExpense(id, number) {\r\n        const updatedExpenses = [ ...fullExpenses].filter((fullExpenses) => fullExpenses.id !== id)\r\n        setFullExpenses(updatedExpenses)\r\n        setTotalCost(parseInt(totalCost) - parseInt(number))\r\n      }\r\n\r\n    return(\r\n        <div className=\"BudgetForm\">\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"inputs\">\r\n                    <label>Expense</label>\r\n                    <input id=\"focusMe\" type=\"text\" onChange={(e) => setExpense(e.target.value)} value={expense}></input>\r\n                </div>\r\n                <div className=\"inputs\">\r\n                    <label>Cost</label>\r\n                    <input type=\"number\" onChange={(e) => setCost(e.target.value)} value={cost}></input>\r\n                </div>\r\n                <button type=\"submit\" className=\"expenseButton\">Add Expense</button>\r\n            </form>\r\n                {fullExpenses.map((fullExpense) => <div key={fullExpense.id} className=\"expenseContainer\">\r\n                    <div className = \"expenseText\">\r\n                        <div>{fullExpense.expense}</div>\r\n                        <div>{\"$\"+fullExpense.number}</div>\r\n                    </div>\r\n                    <button onClick={() => deleteExpense(fullExpense.id, fullExpense.number)}>Delete</button>\r\n                </div>)}\r\n            <div className=\"total\">\r\n                <p>Total: ${totalCost}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BudgetForm;","import './App.css'\nimport React from 'react';\nimport BudgetForm from './components/BudgetForm';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <h1>Expense Calculator</h1>\n      <BudgetForm />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}